# 1이 될 때까지
'''
N, K가 주어졌을 때, ( 1 <= N <= 100,000, 2 <= K <= 100,000 )
다음의 두 작업만 가능하다.
1. N--
2. N = N / K (나누어 떨어질 때)
최소한의 횟수로 N을 1로 만들 때 최소한의 횟수를 구하시오.
'''

n, k = map(int, input().split())

result = 0

while True:
  # N이 K로 나누어 떨어지는 수가 될 때까지 빼기 (2의 방식을 최대한 많이 수행하기 위함)
  target = (n // k) * k
  result += (n - target)
  n = target
  # N이 K보다 작을 때 2의 방식 불가하므로 반복문 탈출
  if n < k: break
  # K로 나누기
  result += 1
  n //= k

# 마지막으로 남은 수에 대해 (1이 될 때까지) 1씩 빼기
result += (n - 1)
print(result)


'''
2의 작업의 K가 2 이상일 때는 항상 1보다 빠르게 아무리 큰 N도 줄여나갈 수 있다.
또한 1의 작업을 반복하면 N이 1에 도달하는 것도 자명하다.
따라서 최대한 많이 2의 작업을 하는 것이 최소한의 횟수를 구하는 방법이다.
'''
